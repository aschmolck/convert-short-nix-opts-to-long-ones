#!/usr/bin/env python3
"""USAGE: nix-short-to-long PATH_IN_GIT_REPO ...

Quick hack to convert use of short nix-env, nix-shell  etc. options to long
ones. E.g. nix-env -e vim => nix-env --uninstall vim etc.

The main motivation is to make documention more readable.
"""

import argparse
import logging as log
import os
import pprint
import re
import subprocess
import sys

from pipes import quote as shell_quote

NIX_COMMANDS = [
    "nix-build",
    "nix-env",
    "nix-instantiate",
    "nix-shell",
    "nix-store",
    "nix build",
    "nix develop",
    "nix flake",
    "nix help",
    # nix help |grep  -Po '·.*\K(nix [a-z-]+)' | xargs -d $'\n' printf '"%s",\n'
    "nix build",
    "nix develop",
    "nix flake init",
    "nix flake new",
    "nix help",
    "nix profile",
    "nix repl",
    "nix run",
    "nix search",
    "nix shell",
    "nix bundle",
    "nix copy",
    "nix edit",
    "nix eval",
    "nix fmt",
    "nix log",
    "nix path-info",
    "nix registry",
    "nix why-depends",
    "nix daemon",
    "nix describe-stores",
    # "nix hash",
    # "nix key",
    "nix nar cat",
    "nix nar dump-path",
    "nix nar ls",
    "nix print-dev-env",
    "nix realisation",
    "nix show-config",
    "nix show-derivation",
    "nix store verify",
    "nix store ls",
    # "nix doctor",
    "nix upgrade-nix",
]


LONG_TO_SHORT_REX = re.compile(
    r"(?m)(^\s*[o·]?\s+|[{])(?P<long>--[^ ,;/|]+)[ ,;/|]+-(?P<short>\w)"
)

assert LONG_TO_SHORT_REX.search(
    "nix-env {--install | -i} [{--prebuilt-only | -b}] [{--attr | -A}] [--from-expression] [-E]"
)
assert LONG_TO_SHORT_REX.match("\n --out-link / -o outlink\n")
assert LONG_TO_SHORT_REX.match(" --available / -a")
assert LONG_TO_SHORT_REX.match(" --available; -a")

NIX_COMMAND_INVOCATION_RE = "(%s) +[^ ]" % r"|".join(NIX_COMMANDS)
NIX_COMMAND_INVOCATION_REX = re.compile(NIX_COMMAND_INVOCATION_RE)


def _parse_short_to_long_from_help(cmd, help_string):
    ans = {
        match.group("short"): match.group("long")
        for match in LONG_TO_SHORT_REX.finditer(help_string)
    }
    if not ans:
        print("WARNING: Did not find any options for " + cmd)
    return ans


def _map_short_to_long_for_all_nix_commands():
    nix_commands_short_to_long = {}
    for cmd in NIX_COMMANDS:
        help = subprocess.check_output(
            f"{cmd} --help".split(), env={"TERM": "dumb", "PATH": os.environ["PATH"]}
        ).decode("utf-8")
        help = re.sub(".\x08", "", help)
        parsed = _parse_short_to_long_from_help(cmd, help)
        nix_commands_short_to_long[cmd] = parsed
    return nix_commands_short_to_long


NIX_COMMANDS_SHORT_TO_LONG = {
    k: v for k, v in _map_short_to_long_for_all_nix_commands().items() if v
}
NIX_COMMANDS_SHORT_TO_LONG["nix-info"] = {
    "m": "--markdown"
}  # nix-info --help is broken, so do it manually
# Fix up missing args (that are not mentioned in --help, or not mentioned in the expected form)
NIX_COMMANDS_SHORT_TO_LONG["nix build"]["L"] = "--print-build-logs"
NIX_COMMANDS_SHORT_TO_LONG["nix-build"]["Q"] = "--no-build-output"
NIX_COMMANDS_SHORT_TO_LONG["nix-build"]["E"] = "--expr"
NIX_COMMANDS_SHORT_TO_LONG["nix-env"]["E"] = "--expr"
NIX_COMMANDS_SHORT_TO_LONG["nix-shell"]["E"] = "--expr"
NIX_COMMANDS_SHORT_TO_LONG["nix-instantiate"]["E"] = "--expr"
# nix-collect-garbage has an unparsable manpage; TODO(alexander): submit PR
NIX_COMMANDS_SHORT_TO_LONG["nix-collect-garbage"] = {"d": "--delete-old"}
NIX_COMMANDS_SHORT_TO_LONG["nix search"]["e"] = "--exclude"
pprint.pprint(NIX_COMMANDS_SHORT_TO_LONG)


def parse_args():
    parser = argparse.ArgumentParser(usage=__doc__)
    arg = parser.add_argument
    arg("-v", "--verbose", action="store_true")
    arg(
        "--extra-git-grep-args",
        nargs="*",
        default=[":(exclude)*.nix", ":(exclude).gitignore"],
    )
    arg("files", nargs="*", default=["."])
    args = parser.parse_args()
    # ugly hack
    first_file = args.files[0]
    args.git_dir = (
        subprocess.check_output(
            ["git", "rev-parse", "--show-toplevel"],
            cwd=(
                first_file if os.path.isdir(first_file) else os.path.dirname(first_file)
            ),
        )
        .strip()
        .decode("utf-8")
    )
    return args


def id(x):
    return x


def _search(regexp):
    return re.compile(regexp).search


# just a heuristic hack
SH_CMD_END = r' [|]{1,2} |; | && | [)]" |(?<!\\)(?:\\)*\n'

find_end = re.compile(SH_CMD_END).search


def long_to_short(invocation_string):
    """
    Examples:
    >>> long_to_short("nix-env -e '*'")
    "nix-env --uninstall '*'"
    >>> long_to_short("nix-env -f ./user-envs.nix -qa --out-path --no-name '*'")
    "nix-env --file ./user-envs.nix --query --available --out-path --no-name '*'"
    >>> long_to_short("nix-store --print-env $(nix-instantiate '&lt;nixpkgs>' -A firefox)")
    "nix-store --print-env $(nix-instantiate '&lt;nixpkgs>' --attr firefox)"
    >>> long_to_short("nix-store --verify-path $(nix-store -qR $(which svn))")
    "nix-store --verify-path $(nix-store --query --requisites $(which svn))"
    """
    if not (match := NIX_COMMAND_INVOCATION_REX.match(invocation_string)):
        return invocation_string
    nix_cmd = match.group(1)
    if not (nix_cmd_option_mapping := NIX_COMMANDS_SHORT_TO_LONG.get(nix_cmd)):
        return invocation_string
    known_shorts = "".join(nix_cmd_option_mapping)
    regex = rf"(?<= )-([{known_shorts}]+)"

    def repl(m):
        ans = " ".join(nix_cmd_option_mapping[c] for c in m.group(1))
        if invocation_string[m.end() : m.end() + 1] not in (" ", "\t", ""):
            ans += " "
        return ans

    new = re.sub(regex, repl, invocation_string)
    if new == invocation_string:
        log.debug("Unchanged <<%s>>", invocation_string)
    else:
        log.debug("old: <<%s>>\n" "new: <<%s>>", (invocation_string, new))
    return new


def longer_contents(contents):
    new_contents = []
    last = 0
    end = 0
    while match := NIX_COMMAND_INVOCATION_REX.search(contents, end):
        start = match.start()
        end = find_end(contents, start).start()
        new_contents.append(contents[last:start])
        new = long_to_short(contents[start:end])
        new_contents.append(new)
        last = end
    new_contents.append(contents[last:])
    return "".join(new_contents)


def convert_file(filename):
    if os.path.islink(filename):
        return
    log.info("Doing %s" % filename)
    ext = os.path.splitext(filename)[-1] or ""
    last = 0
    new_contents = []
    open(filename, "r").read()
    with open(filename, "r") as fh:
        contents = fh.read()
    with open(filename, "w") as fh:
        fh.write(longer_contents(contents))


if __name__ == "__main__":
    args = parse_args()
    log.basicConfig(
        format="%(message)s",
        level=log.DEBUG if args.verbose else log.INFO,
    )
    cmd = (
        [
            "git",
            "-C",
            args.git_dir,
            "--no-pager",
            "grep",
            "-l",
            "-E",
            NIX_COMMAND_INVOCATION_RE,
            "--",
        ]
        + args.files
        + args.extra_git_grep_args
    )
    cmd_debug = " ".join(map(shell_quote, cmd))
    try:
        matching_files = (
            subprocess.check_output(cmd).decode("utf-8").strip().split("\n")
        )
    except subprocess.CalledProcessError as e:
        log.exception("git command (%s) failed", cmd_debug)
        sys.exit(1)
    for filename in matching_files:
        convert_file(filename)
